1
00:00:00,920 --> 00:00:08,240
In this lesson we'll talk about my rescue well use this as a tool that is tricky at first grasping its

2
00:00:08,240 --> 00:00:13,340
functionality to the fullest can be a bit difficult without significant practice.

3
00:00:13,460 --> 00:00:19,230
In this lecture we will introduce you to this concept and show you how and why viewers are used in S..

4
00:00:19,230 --> 00:00:27,900
Q Well great a view is a virtual table whose contents are obtained from an existing table or tables

5
00:00:27,990 --> 00:00:29,780
called base tables.

6
00:00:30,740 --> 00:00:37,830
The retrieval happens through an executable statement incorporated into the view to remember this explanation

7
00:00:37,830 --> 00:00:38,940
more easily.

8
00:00:38,940 --> 00:00:42,370
Think of a view object as a view into the base table.

9
00:00:42,570 --> 00:00:45,680
The view itself does not contain any real data.

10
00:00:45,720 --> 00:00:48,750
The data is physically stored in the base table.

11
00:00:48,750 --> 00:00:54,020
The view simply shows the data contained in the base table.

12
00:00:54,060 --> 00:00:58,140
Let's provide an example and then we'll discuss when views can be helpful.

13
00:00:58,530 --> 00:01:03,930
We will focus on the department employee table that contains information about the department in which

14
00:01:03,960 --> 00:01:08,670
each employee is working as well as the start and end date of their contract.

15
00:01:12,360 --> 00:01:16,520
It has more than 331 thousand entries.

16
00:01:16,560 --> 00:01:20,980
OK some employee numbers have been inserted more than once.

17
00:01:22,710 --> 00:01:24,550
Why.

18
00:01:24,660 --> 00:01:30,900
Because a new entry about the same employee has been recorded every time the employee changed departments.

19
00:01:30,900 --> 00:01:38,350
This results in more than one start and end date for such employees to verify this is the case.

20
00:01:38,400 --> 00:01:43,440
We could run a query that shows the employee numbers of people registered in the department employee

21
00:01:43,440 --> 00:01:44,040
table.

22
00:01:44,070 --> 00:01:52,820
More than once after we executed we will know how many such entries we have 31000.

23
00:01:52,820 --> 00:01:55,050
579.

24
00:01:55,260 --> 00:01:57,620
Good.

25
00:01:57,720 --> 00:02:01,520
Why would we need a view in this case well.

26
00:02:01,730 --> 00:02:07,710
Imagine you wanted to see a tabular output with the number of each employee shown only once having aside

27
00:02:07,730 --> 00:02:11,220
their latest starting and ending date.

28
00:02:11,230 --> 00:02:18,160
In other words you would like to visualize only the period in compassing the last contract of each employee.

29
00:02:19,930 --> 00:02:22,690
The syntax to abide by is the following.

30
00:02:23,840 --> 00:02:25,070
First type.

31
00:02:25,070 --> 00:02:26,740
Create or replace.

32
00:02:27,380 --> 00:02:28,070
Of course.

33
00:02:28,070 --> 00:02:31,060
Create view could suffice but the.

34
00:02:31,060 --> 00:02:37,340
Or replace fragment ascertains that the code we are about to write will be executed even if we already

35
00:02:37,340 --> 00:02:39,330
have a view with the same name.

36
00:02:40,310 --> 00:02:42,780
Second you'll have to add a name.

37
00:02:42,800 --> 00:02:49,400
Typically we assign views with the names starting with V underscore or W underscore to indicate the

38
00:02:49,400 --> 00:02:50,930
object is a view.

39
00:02:51,170 --> 00:02:54,490
Let's call our view the department employee.

40
00:02:54,530 --> 00:02:55,650
Latest date.

41
00:02:57,340 --> 00:03:06,020
OK don't forget to type the as keyword before you expose the final part of the query which is a select

42
00:03:06,020 --> 00:03:06,880
statement.

43
00:03:13,280 --> 00:03:18,080
Namely this select statement will extract data from the base table that will populate the view

44
00:03:28,270 --> 00:03:30,730
as we run the select statement separately

45
00:03:37,510 --> 00:03:42,010
we obtain the tabular output that our view delivers every time when implemented

46
00:03:45,240 --> 00:03:46,990
OK.

47
00:03:47,140 --> 00:03:54,490
Apparently we managed to retrieve a three column table with the last from and to dates registered for

48
00:03:54,490 --> 00:04:00,030
each employee as defined by a max function alright.

49
00:04:02,140 --> 00:04:05,470
Let's execute this query and create our view.

50
00:04:08,460 --> 00:04:13,450
Perfect any signs the operation was carried out smoothly.

51
00:04:13,470 --> 00:04:15,650
Apart from the green circle here.

52
00:04:15,930 --> 00:04:22,350
Well look at the schema section at the left side of the screen and expand the subsection of the Employees

53
00:04:22,350 --> 00:04:23,210
table.

54
00:04:23,490 --> 00:04:31,500
You can see four object types one of which is Vu's the two small icons located to the right of its name

55
00:04:31,620 --> 00:04:33,810
provide certain information about it.

56
00:04:34,080 --> 00:04:40,050
While the last one executes the select statement embedded in the view delivering the desired result

57
00:04:44,680 --> 00:04:46,500
fantastic.

58
00:04:46,660 --> 00:04:53,360
As a matter of fact the view could be executed by typing the code that just appeared in the new tab.

59
00:04:53,410 --> 00:04:59,230
It is a mere select statement where the database name containing the view must precede the name the

60
00:04:59,320 --> 00:05:00,640
department employee.

61
00:05:00,700 --> 00:05:03,070
Latest date.

62
00:05:03,150 --> 00:05:05,500
This is it from a technical perspective.

63
00:05:06,420 --> 00:05:14,340
We created a view that extracts the information we wanted and we use two ways to do that OK.

64
00:05:14,430 --> 00:05:17,300
But why in general do we need views.

65
00:05:17,580 --> 00:05:20,300
Doing that probably seemed redundant.

66
00:05:20,310 --> 00:05:26,760
Can't we just run the select statement and obtain the desired output well.

67
00:05:26,790 --> 00:05:33,080
Imagine your database is used by a large web application being accessed by many users.

68
00:05:33,120 --> 00:05:38,430
If you would like to allow each user to see this table instead of typing and running the queue Well

69
00:05:38,430 --> 00:05:45,960
statement that extracts the required information every time a request from a user appears.

70
00:05:46,130 --> 00:05:54,690
The view can allow each user to see the result set on their user space a view x as a shortcut for writing

71
00:05:54,690 --> 00:05:58,780
the same select statement every time a new request has been made.

72
00:06:00,040 --> 00:06:03,600
Thus it saves a lot of coding time.

73
00:06:04,000 --> 00:06:10,610
Moreover because it is written only once the view occupies no extra memory.

74
00:06:10,710 --> 00:06:16,740
Finally the view acts as a dynamic table because it instantly reflects data and structural changes in

75
00:06:16,740 --> 00:06:22,220
the base table.

76
00:06:22,260 --> 00:06:30,360
For instance if you as a data administrator must update the contract date of employee 1 0 0 0 1

77
00:06:33,320 --> 00:06:36,730
when you check the view the new date value will appear.

78
00:06:36,980 --> 00:06:44,150
You will need to make no additional changes in the code composing the view to conclude views are advantageous

79
00:06:44,150 --> 00:06:47,270
when used logically in certain applications.

80
00:06:47,270 --> 00:06:50,270
The use of use can definitely be beneficial.

81
00:06:50,300 --> 00:06:56,870
Nevertheless don't forget that they are not real physical datasets meaning we cannot insert or update

82
00:06:56,870 --> 00:07:00,410
the information that has already been extracted.

83
00:07:00,410 --> 00:07:03,230
This should be seen as temporary virtual data tables.

84
00:07:03,230 --> 00:07:10,890
Retrieving information from base tables OK that will do for now.

85
00:07:10,890 --> 00:07:12,210
Thank you for watching.
