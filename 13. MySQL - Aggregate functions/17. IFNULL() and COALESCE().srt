1
00:00:00,740 --> 00:00:06,170
Consider the output we obtained in the previous lecture Let's see what you can do if you are unhappy

2
00:00:06,170 --> 00:00:11,420
with the Noall label and would like to have a different sign or text displayed when there is a missing

3
00:00:11,420 --> 00:00:12,940
value.

4
00:00:13,030 --> 00:00:18,820
For instance if we lack data for the department name field and we would like to see Department name

5
00:00:18,940 --> 00:00:23,430
not provided instead of gnoll how can we do that in my school.

6
00:00:24,730 --> 00:00:31,300
A function called if NULL can be employed within this select block and needs only two arguments within

7
00:00:31,300 --> 00:00:33,210
its parentheses.

8
00:00:33,300 --> 00:00:39,270
If null function works in the following way it returns the first of the two indicated values.

9
00:00:39,310 --> 00:00:45,970
If the data value found in the table is not normal and returns the second value if there is a null value

10
00:00:46,420 --> 00:00:49,550
then it prints the return value in the column of the output.

11
00:00:51,550 --> 00:00:57,850
The following example better illustrates how if null works in practice we can select the department

12
00:00:57,850 --> 00:01:04,270
number column and it will be projected as the first column in our output table.

13
00:01:04,290 --> 00:01:11,550
Then after a comma instead of simply placing the department in field we can add it within the parentheses

14
00:01:11,580 --> 00:01:14,290
of the if not all function.

15
00:01:14,440 --> 00:01:21,130
In this case if the value of a certain record in department name is null we will see the string we are

16
00:01:21,130 --> 00:01:27,410
about to insert after the comma department name not provided.

17
00:01:27,630 --> 00:01:33,000
If the department name field is not null we will see the initial data value.

18
00:01:34,790 --> 00:01:36,590
Awesome.

19
00:01:36,740 --> 00:01:38,770
Let's run this query to see the result

20
00:01:41,060 --> 00:01:43,520
exactly what we wanted.

21
00:01:43,520 --> 00:01:44,760
Great.

22
00:01:44,940 --> 00:01:48,100
At this point only one thing is a bit annoying.

23
00:01:48,420 --> 00:01:51,270
This whole line shouldn't be a column name.

24
00:01:51,600 --> 00:01:52,690
Wouldn't you agree.

25
00:01:53,540 --> 00:01:54,740
What do you think.

26
00:01:54,740 --> 00:02:01,510
Can we rename this column to department name and rerun the query.

27
00:02:01,690 --> 00:02:02,360
Boom.

28
00:02:02,590 --> 00:02:03,940
Much better.

29
00:02:03,970 --> 00:02:07,950
This is a decent output and still deliver the expected result.

30
00:02:09,290 --> 00:02:15,020
Of course if no has its limitations it cannot contain more than two parameters.

31
00:02:16,600 --> 00:02:19,950
This is where coalesce steps in.

32
00:02:20,000 --> 00:02:27,720
It allows you to insert in arguments in the parentheses you can think of coalesce as if gnoll with more

33
00:02:27,720 --> 00:02:29,060
than two parameters.

34
00:02:29,930 --> 00:02:36,350
By definition coalesce will always return a single value of the ones we have within parentheses and

35
00:02:36,650 --> 00:02:40,250
this value will be the first non-null value of this list.

36
00:02:40,250 --> 00:02:49,360
Reading the values from left to right as a result if coalesce has two arguments it will work precisely

37
00:02:49,360 --> 00:02:52,670
like if null.

38
00:02:52,790 --> 00:02:57,410
Let's verify this by substituting a function name and re executing the query

39
00:03:02,380 --> 00:03:04,880
the output we obtained is identical.

40
00:03:04,930 --> 00:03:10,900
Awesome Let's see all coalesce works when we have three arguments.

41
00:03:20,810 --> 00:03:26,370
The function we have here points to the third column and it will contain three arguments.

42
00:03:27,530 --> 00:03:33,710
Our idea is to see in each cell of the third column the initial value of that cell if it is not null

43
00:03:36,210 --> 00:03:41,260
to see the department name value if it is null.

44
00:03:41,380 --> 00:03:47,820
And finally to see an in a string if the second designated value department name is null

45
00:03:50,770 --> 00:03:56,830
so because all values in the third column are null we should expect to have the second column replicated

46
00:03:56,830 --> 00:04:05,190
in place of the third one except for the last couple of rows where we should have any OK let's run this

47
00:04:05,190 --> 00:04:07,290
query and analyze the output

48
00:04:09,900 --> 00:04:10,720
great.

49
00:04:10,920 --> 00:04:19,430
The first section of our query is the department number and then we have a department name Next consider

50
00:04:19,430 --> 00:04:22,130
the first row of the third column.

51
00:04:22,130 --> 00:04:27,010
It makes us think about the three arguments of the coalesce function.

52
00:04:27,120 --> 00:04:32,240
The first argument is No it is the initial value of the department manager column.

53
00:04:32,310 --> 00:04:37,170
But as you remember the entire column was empty.

54
00:04:37,170 --> 00:04:39,800
So what does coalesce do.

55
00:04:40,600 --> 00:04:44,820
It simply moves on until it finds a non-null value right.

56
00:04:44,860 --> 00:04:50,770
Therefore coalesce so to speak skips the value of the first argument and proceeds to check the value

57
00:04:50,770 --> 00:04:52,460
of the second argument.

58
00:04:52,480 --> 00:04:55,280
It is the value of the department name field.

59
00:04:55,300 --> 00:04:59,190
Do we have any information there yes.

60
00:04:59,240 --> 00:05:02,660
The name of the Department of the first record is marketing.

61
00:05:02,660 --> 00:05:09,290
So coalesce stops here and says Here is a non-null value of one of my arguments.

62
00:05:09,290 --> 00:05:12,800
This is the one I am going to display.

63
00:05:12,810 --> 00:05:17,050
This is why marketing is displayed as a value in the third column.

64
00:05:17,230 --> 00:05:19,790
Fantastic.

65
00:05:19,800 --> 00:05:26,740
Now please consider the last row department number 11 the department name has not been registered.

66
00:05:26,760 --> 00:05:32,420
Hence we see no value as a result in the last row of the third column.

67
00:05:32,490 --> 00:05:34,600
Coalesce will work like this.

68
00:05:35,390 --> 00:05:42,950
First it will check the initial value of the department manager and understand that it is null then

69
00:05:43,100 --> 00:05:46,960
it will check the value of the department name which is null again.

70
00:05:48,170 --> 00:05:50,260
So what's next.

71
00:05:50,510 --> 00:05:56,830
Coalesce we'll see whether any arguments are enlisted within the parentheses and will check their values.

72
00:05:56,840 --> 00:05:59,970
We have one more in a.

73
00:06:00,530 --> 00:06:07,090
This is a non-null string value and that's why coalesce displays it in the last row of the third field.

74
00:06:07,130 --> 00:06:08,710
Great.

75
00:06:08,880 --> 00:06:14,980
Remember one very important thing about coalesce and if Noal they do not make any changes to the data

76
00:06:14,980 --> 00:06:21,490
set they merely create an output where certain data values appear in place of null values.

77
00:06:22,710 --> 00:06:23,720
Thanks for watching.
